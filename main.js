!function(){"use strict";const e=document.querySelector(".profile__info"),t=(e.querySelector(".profile__header"),e.querySelector(".profile__profession"),document.querySelectorAll(".popup"),document.forms.profileForm,document.querySelector(".popup_type_profile")),s=document.querySelector(".profile__button"),r=(t.querySelector(".popup__close"),t.querySelector(".popup__input_type_name")),o=t.querySelector(".popup__input_type_profession"),i=document.querySelector(".popup_type-preview"),n=(document.querySelector(".popup_type_add-card"),document.querySelector(".add-button")),l=(document.querySelector(".popup__close.popup__close_preview"),document.querySelector(".popup__close.popup__close_add"),document.querySelector(".popup__input_type_title"),document.querySelector(".popup__input_type_link"),i.querySelector(".popup__image"),i.querySelector(".popup__subtitle"),document.querySelector(".elements__cards"),{inputSelector:".popup__input",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_disabled",inputErrorClass:"popup__input-error_open",errorClass:"popup__error_visible"}),a=document.querySelector(".popup__form_edit"),c=document.querySelector(".popup__form_cards");function u(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}var _=class{constructor(e,t){u(this,"_showInputError",((e,t)=>{const{inputErrorClass:s,errorClass:r}=this._settings,o=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(r),o.textContent=t,o.classList.add(s)})),u(this,"_hideInputError",(e=>{const{inputErrorClass:t,errorClass:s}=this._settings,r=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(s),r.classList.remove(t),r.textContent=""})),u(this,"_checkInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),u(this,"_setEventListeners",(()=>{const{inputSelector:e}=this._settings;this.inputList=Array.from(this._formElement.querySelectorAll(e)),this._toggleButton(),this.inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButton()}))}))})),u(this,"_hasValidInput",(()=>this.inputList.every((e=>e.validity.valid)))),u(this,"_toggleButton",(()=>{const{inactiveButtonClass:e}=this._settings;this._inactiveButtonClass=e,this._hasValidInput()?this.enableButton():this.disableButton()})),u(this,"enableButton",(()=>{this._submitButton.disabled=!1,this._submitButton.classList.remove(this._inactiveButtonClass)})),u(this,"disableButton",(()=>{this._submitButton.disabled=!0,this._submitButton.classList.add(this._inactiveButtonClass)})),this._settings=e,this._formElement=t,this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}resetValidation(){this.inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};function p(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class d{constructor(e,t,s,r,o){p(this,"_handleCardDelete",(()=>{this._cardElement.remove()})),p(this,"_addEventListeners",(()=>{this._likeButton.addEventListener("click",(()=>this._handleLikeIcon())),this._deleteButton.addEventListener("click",(()=>this._handleCardDelete())),this._cardImage.addEventListener("click",(()=>this._handleCardClick(this._name,this._link)))})),this._data=e,this._name=e.name,this._link=e.link,this._likes=e.likes,this._id=e._id,this.userId=t,this._templateCardSelector=s,this._handleCardClick=r,this._handleLikeIcon=o}getId(){return this._id}_getTemplate(){return document.querySelector(this._templateCardSelector).content.querySelector(".elements__card")}setLikeCounter(e){this._likes=e;const t=this._likes.length;this._cardElement.querySelector(".elements__card_likes").textContent=t}generateCard(){return this._cardElement=this._getTemplate().cloneNode(!0),this._cardImage=this._cardElement.querySelector(".elements__image"),this._cardName=this._cardElement.querySelector(".elements__card-text"),this._likeButton=this._cardElement.querySelector(".elements__button-like"),this._deleteButton=this._cardElement.querySelector(".elements__button-delete"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardName.textContent=this._name,this._addEventListeners(),this.setLikeCounter(this._likes),this._cardElement}}const h="popup_open";class m{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popup.classList.add(h),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove(h),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close"))&&this.close()}))}}class f extends m{constructor(e,t){super(e),this._handleSubmitForm=t,this._form=this._popup.querySelector(".popup__form"),this._inputs=this._form.querySelectorAll(".popup__input")}_getInputValues(){const e={};return this._inputs.forEach((t=>{const s=t.id,r=t.value;e[s]=r})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmitForm(this._getInputValues())}))}setInputValues(e){this._inputs.forEach((t=>{t.value=e[t.name]}))}close(){super.close(),this._form.reset()}}const y=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}getUserInfo(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}getInitialCards(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}editProfile(e,t){return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}addCard(e,t){return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}addLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText)))}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"9398a483-484e-4ebd-a374-b6b3b985e9c4","Content-Type":"application/json"}});let b;y.getUserInfo().then((e=>{b=e.id,L.setUserInfo(e.name,e.about)})).catch(console.log),y.getInitialCards().then((e=>{console.log("res getInitialCards =>",e),C.rendererItems(e)})).catch(console.log);const S=new _(l,a),g=new _(l,c);S.enableValidation(),g.enableValidation(),S.resetValidation();const E=new f("#popup-template-form",(e=>{y.addCard(e.cardTitle,e.cardImageLink).then((e=>{console.log("res =>",e);const t={name:e.name,link:e.link};C.addItem(t)})).catch(console.log),E.close()}));E.setEventListeners();const v=new f("#popup-template",(e=>{y.editProfile(e.name,e.profession).then((t=>{L.setUserInfo(e.name,e.profession)})).catch(console.log).finally((()=>{v.close()}))}));v.setEventListeners();const k=new class extends m{constructor(e){super(e),this._subtitle=this._popup.querySelector(".popup__subtitle"),this._image=this._popup.querySelector(".popup__image")}open(e,t){super.open(),this._image.src=t,this._image.alt=e,this._subtitle.textContent=e}}("#popup-image");k.setEventListeners();const C=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}rendererItems(e){e.forEach((e=>{this.addItem(e)}))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}}({renderer:e=>{const t=new d(e,"...","#card-template",((e,t)=>{k.open(e,t)}),(()=>{y.addLike(t.getId()).then((e=>{t.setLikeCounter(e.likes),console.log("You like it don't you")}))}));return t.generateCard()}},".elements__cards"),L=new class{constructor(e){let{profileNameSelector:t,profileProfessionSelector:s}=e;this._profileName=document.querySelector(t),this._profileProfession=document.querySelector(s)}getUserInfo(){return{name:this._profileName.textContent,profession:this._profileProfession.textContent}}setUserInfo(e,t){this._profileName.textContent=e,this._profileProfession.textContent=t}}({profileNameSelector:".profile__header",profileProfessionSelector:".profile__profession"});s.addEventListener("click",(()=>{const e=L.getUserInfo();r.value=e.name,o.value=e.profession,S.resetValidation(),S.enableButton(),v.open()})),n.addEventListener("click",(()=>{g.resetValidation(),g.disableButton(),E.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,