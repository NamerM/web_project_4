!function(){"use strict";const e=document.querySelector(".profile__image"),t=document.querySelector(".popup_type_profile"),s=document.querySelector(".profile__button"),n=(t.querySelector(".popup__close"),t.querySelector(".popup__input_type_name")),i=t.querySelector(".popup__input_type_profession"),r=document.querySelector(".add-button"),o=(document.querySelector(".elements__cards"),{inputSelector:".popup__input",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_disabled",inputErrorClass:"popup__input-error_open",errorClass:"popup__error_visible"}),a=document.querySelector(".popup__form_edit"),l=document.querySelector(".popup__form_cards"),h=document.querySelector(".popup__form_avatar");function c(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}var _=class{constructor(e,t){c(this,"_showInputError",((e,t)=>{const{inputErrorClass:s,errorClass:n}=this._settings,i=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(n),i.textContent=t,i.classList.add(s)})),c(this,"_hideInputError",(e=>{const{inputErrorClass:t,errorClass:s}=this._settings,n=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(s),n.classList.remove(t),n.textContent=""})),c(this,"_checkInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),c(this,"_setEventListeners",(()=>{const{inputSelector:e}=this._settings;this.inputList=Array.from(this._formElement.querySelectorAll(e)),this._toggleButton(),this.inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButton()}))}))})),c(this,"_hasValidInput",(()=>this.inputList.every((e=>e.validity.valid)))),c(this,"_toggleButton",(()=>{const{inactiveButtonClass:e}=this._settings;this._inactiveButtonClass=e,this._hasValidInput()?this.enableButton():this.disableButton()})),c(this,"enableButton",(()=>{this._submitButton.disabled=!1,this._submitButton.classList.remove(this._inactiveButtonClass)})),c(this,"disableButton",(()=>{this._submitButton.disabled=!0,this._submitButton.classList.add(this._inactiveButtonClass)})),this._settings=e,this._formElement=t,this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}resetValidation(){this.inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class d{constructor(e,t,s,n,i,r){this._data=e,this._name=e.name,this._link=e.link,this._likes=e.likes,this._id=e._id,this._userId=t,this._ownerId=e.owner._id,this._templateCardSelector=s,this._handleCardClick=n,this._handleLikeIcon=i,this._handleDeleteClick=r}getId(){return this._id}_getTemplate(){return document.querySelector(this._templateCardSelector).content.querySelector(".elements__card")}_addEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLikeIcon())),this._deleteButton.addEventListener("click",(()=>this._handleDeleteClick(this))),this._cardImage.addEventListener("click",(()=>this._handleCardClick(this._name,this._link)))}removeCard(){this._cardElement.remove(),this._cardElement=null}setLikeCounter(e){this._likes=e;const t=this._likes.length;this._cardElement.querySelector(".elements__card_likes").textContent=t,this.isLiked()?this._likeButton.classList.add("elements__button-like_active"):this._likeButton.classList.remove("elements__button-like_active")}isLiked(){return this._likes.find((e=>e._id===this._userId))}generateCard(){return this._cardElement=this._getTemplate().cloneNode(!0),this._cardImage=this._cardElement.querySelector(".elements__image"),this._cardName=this._cardElement.querySelector(".elements__card-text"),this._likeButton=this._cardElement.querySelector(".elements__button-like"),this._deleteButton=this._cardElement.querySelector(".elements__button-delete"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardName.textContent=this._name,this._addEventListeners(),this.setLikeCounter(this._likes),this._userId!==this._ownerId&&(this._deleteButton.style.display="none"),this._cardElement}}const u="popup_open";class p{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popup.classList.add(u),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove(u),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close"))&&this.close()}))}}class m extends p{constructor(e,t){super(e),this._handleSubmitForm=t,this._form=this._popup.querySelector(".popup__form"),this._inputs=this._form.querySelectorAll(".popup__input")}_getInputValues(){const e={};return this._inputs.forEach((t=>{const s=t.id,n=t.value;e[s]=n})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmitForm(this._getInputValues())}))}setInputValues(e){this._inputs.forEach((t=>{t.value=e[t.name]}))}changeSubmitHandler(e){this._handleSubmitForm=e}changeText(e){const t=this._popup.querySelector(".popup__save");"Saving"===e&&(t.textContent="Saving..."),"Default"===e&&(t.textContent="Save")}close(){super.close(),this._form.reset()}}const f=new class{constructor(e){var t,s;s=(e,t)=>fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse).then((e=>e.json())),(t="editProfile")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._baseUrl=e.baseUrl,this._headers=e.headers,this._checkResponse=e.checkResponse}getUserInfo(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then(this._checkResponse).then((e=>e.json()))}editAvatar(e){return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse).then((e=>e.json()))}getInitialCards(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then(this._checkResponse).then((e=>e.json()))}addCard(e,t){return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkResponse).then((e=>e.json()))}addLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._headers}).then(this._checkResponse).then((e=>e.json()))}removeLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._headers}).then(this._checkResponse).then((e=>e.json()))}deleteCard(e){return fetch(this._baseUrl+"/cards/"+e,{method:"DELETE",headers:this._headers}).then(this._checkResponse).then((e=>e.json()))}_checkResponse(e){return e.ok?e.json():Promise.reject(e.statusText)}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"9398a483-484e-4ebd-a374-b6b3b985e9c4","Content-Type":"application/json"}});let v;Promise.all([f.getUserInfo(),f.getInitialCards()]).then((e=>{let[t,s]=e;v=t._id,B.setUserInfo(t.name,t.about,t.avatar),q.rendererItems(s)})).catch(console.log);const g=new _(o,a),b=new _(o,l),k=new _(o,h);g.enableValidation(),b.enableValidation(),k.enableValidation(),g.resetValidation();const E=e=>{C.open(),C.changeSubmitHandler((()=>{f.deleteCard(e.getId()).then((()=>{e.removeCard()})),C.close()}))},y=new m("#popup-template",(e=>{y.changeText("Saving"),f.editProfile(e.name,e.profession).then((t=>{B.setUserInfo(t.name,e.profession,t.avatar),y.changeText("Default")})).catch(console.log).finally((()=>{y.close()}))}));y.setEventListeners();const S=new m("#popup-template-avatar",(e=>{S.changeText("Saving"),f.editAvatar(e.link).then((e=>{B.setUserInfo(e.name,e.about,e.avatar),S.changeText("Default")})).catch(console.log).finally((()=>{S.close()}))}));S.setEventListeners();const L=new m("#popup-template-form",(e=>{L.changeText("Saving"),f.addCard(e.cardTitle,e.cardImageLink).then((e=>{q.addItem(e),L.changeText("Default")})).catch(console.log),L.close()}));L.setEventListeners();const C=new m("#popup-template-confirm",E);C.setEventListeners();const I=new class extends p{constructor(e){super(e),this._subtitle=this._popup.querySelector(".popup__subtitle"),this._image=this._popup.querySelector(".popup__image")}open(e,t){super.open(),this._image.src=t,this._image.alt=e,this._subtitle.textContent=e}}("#popup-image");I.setEventListeners();const q=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}rendererItems(e){e.forEach((e=>{this.addItem(e)}))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}}({renderer:e=>{const t=new d(e,v,"#card-template",(()=>(e=>{I.open(e.name,e.link)})(e)),(()=>{var e;(e=t).isLiked()?f.removeLike(e.getId()).then((t=>{e.setLikeCounter(t.likes)})):f.addLike(e.getId()).then((t=>{e.setLikeCounter(t.likes)}))}),(e=>E(e)));return t.generateCard()}},".elements__cards"),B=new class{constructor(e){let{profileNameSelector:t,profileProfessionSelector:s,profileAvatar:n}=e;this._profileName=document.querySelector(t),this._profileProfession=document.querySelector(s),this._profileAvatar=document.querySelector(n)}getUserInfo(){return{name:this._profileName.textContent,profession:this._profileProfession.textContent,avatar:this._profileAvatar.style.backgroundImage}}setUserInfo(e,t,s){this._profileName.textContent=e,this._profileProfession.textContent=t,this._profileAvatar.style.backgroundImage="url(".concat(s,")")}}({profileNameSelector:".profile__header",profileProfessionSelector:".profile__profession",profileAvatar:".profile__image"});s.addEventListener("click",(function(){const e=B.getUserInfo();n.value=e.name,i.value=e.profession,g.resetValidation(),g.enableButton(),y.open()})),r.addEventListener("click",(()=>{b.resetValidation(),b.disableButton(),L.open()})),e.addEventListener("click",(()=>{k.resetValidation(),k.disableButton(),S.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQW5ELE9INEgwQixDQUM1QitDLG9CQUFxQixtQkFDckJDLDBCQUEyQix1QkFDM0JyTSxjQUFlLG9CQWVqQkksRUFBV3FDLGlCQUFpQixTQVo1QixXQUNFLE1BQU1pSyxFQUFjdkMsRUFBU2hCLGNBRTdCOUksRUFBVW9ILE1BQVFpRixFQUFZMUksS0FDOUIxRCxFQUFnQm1ILE1BQVFpRixFQUFZeEIsV0FFcENSLEVBQWtCeEgsa0JBQ2xCd0gsRUFBa0I1SCxlQUNsQmtJLEVBQWlCcEUsVUFNbkJyRyxFQUFVa0MsaUJBQWlCLFNBQVMsS0FDbENtSSxFQUFxQjFILGtCQUNyQjBILEVBQXFCN0gsZ0JBQ3JCc0ksRUFBYXpFLFVBR2Y1RyxFQUFjeUMsaUJBQWlCLFNBQVMsS0FDdENvSSxFQUFvQjNILGtCQUNwQjJILEVBQW9COUgsZ0JBQ3BCcUksRUFBa0J4RSxVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veWFuZGV4LnByYWN0aWN1bS5wcm9qZWN0Ly4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly95YW5kZXgucHJhY3RpY3VtLnByb2plY3QvLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3lhbmRleC5wcmFjdGljdW0ucHJvamVjdC8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8veWFuZGV4LnByYWN0aWN1bS5wcm9qZWN0Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8veWFuZGV4LnByYWN0aWN1bS5wcm9qZWN0Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly95YW5kZXgucHJhY3RpY3VtLnByb2plY3QvLi9zcmMvdXRpbHMvQXBpLmpzIiwid2VicGFjazovL3lhbmRleC5wcmFjdGljdW0ucHJvamVjdC8uL3NyYy9wYWdlL2luZGV4LmpzIiwid2VicGFjazovL3lhbmRleC5wcmFjdGljdW0ucHJvamVjdC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL3lhbmRleC5wcmFjdGljdW0ucHJvamVjdC8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8veWFuZGV4LnByYWN0aWN1bS5wcm9qZWN0Ly4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy9Gb3IgUHJvZmlsZSBhbmQgcG9wdXAgZWxlbWVudHNcbmNvbnN0IHByb2ZpbGVBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2ltYWdlXCIpO1xuXG5jb25zdCBwcm9maWxlUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX3R5cGVfcHJvZmlsZVwiKTsgLy8ucG9wdXAgYmFzdGFraSBzaWxpbmRpXG5jb25zdCBlZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19idXR0b25cIik7XG5jb25zdCBjbG9zZUJ1dHRvbiA9IHByb2ZpbGVQb3B1cC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19jbG9zZVwiKTtcbmNvbnN0IGlucHV0TmFtZSA9IHByb2ZpbGVQb3B1cC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19pbnB1dF90eXBlX25hbWVcIik7XG5jb25zdCBpbnB1dFByb2Zlc3Npb24gPSBwcm9maWxlUG9wdXAucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9faW5wdXRfdHlwZV9wcm9mZXNzaW9uXCIpO1xuXG4vLyAvLy8vL0NBUkRTXG5cbmNvbnN0IGFkZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLWJ1dHRvblwiKTtcblxuLy8gV3JhcHBlcnNcbmNvbnN0IGVsZW1lbnRzTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudHNfX2NhcmRzXCIpO1xuXG5jb25zdCBzZXR0aW5ncyA9IHtcbiAgaW5wdXRTZWxlY3RvcjogXCIucG9wdXBfX2lucHV0XCIsXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5wb3B1cF9fc2F2ZVwiLFxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcInBvcHVwX19zYXZlX2Rpc2FibGVkXCIsXG4gIGlucHV0RXJyb3JDbGFzczogXCJwb3B1cF9faW5wdXQtZXJyb3Jfb3BlblwiLFxuICBlcnJvckNsYXNzOiBcInBvcHVwX19lcnJvcl92aXNpYmxlXCIsXG59O1xuXG5jb25zdCBlZGl0Rm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2Zvcm1fZWRpdFwiKTtcbmNvbnN0IGFkZENhcmRGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fZm9ybV9jYXJkc1wiKTtcbmNvbnN0IGF2YXRhckNoYW5nZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2Zvcm1fYXZhdGFyXCIpO1xuXG5cbmV4cG9ydCB7XG4gIHNldHRpbmdzLCBlZGl0Rm9ybSwgYWRkQ2FyZEZvcm0sIGF2YXRhckNoYW5nZSwgZWRpdEJ1dHRvbiwgY2xvc2VCdXR0b24sIGlucHV0TmFtZSwgaW5wdXRQcm9mZXNzaW9uLFxuICBhZGRCdXR0b24sIGVsZW1lbnRzTGlzdCwgcHJvZmlsZUF2YXRhclxufTtcblxuXG5cbi8vY29uc3QgcHJvZmlsZUluZm8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2luZm9cIik7XG4vLyBjb25zdCBwcm9maWxlTmFtZSA9IHByb2ZpbGVJbmZvLnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9faGVhZGVyXCIpO1xuLy8gY29uc3QgcHJvZmlsZVByb2Zlc3Npb24gPSBwcm9maWxlSW5mby5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX3Byb2Zlc3Npb25cIik7XG4vLyBjb25zdCBwb3B1cExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBvcHVwXCIpO1xuLy8gY29uc3QgcHJvZmlsZUZvcm0gPSBkb2N1bWVudC5mb3Jtcy5wcm9maWxlRm9ybTsgLy9xdWVyeVNlbGVjdG9yKCcucG9wdXBfZm9ybScpOy8vXG4vLyBjb25zdCBwb3B1cFNlbGVjdG9yID0gXCJwb3B1cF9vcGVuXCI7XG5cblxuLy8gY29uc3QgQ2FyZF9UZW1wbGF0ZV9TZWxlY3RvciA9IFwiI2NhcmQtdGVtcGxhdGVcIjtcbi8vIGNvbnN0IHByZXZpZXdJbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfdHlwZS1wcmV2aWV3XCIpO1xuLy8gY29uc3QgY2FyZERlbGV0ZVBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cF90eXBlX2NvbmZpcm0tZGVsZXRlXCIpO1xuLy8gY29uc3QgZGVsZXRlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5lbGVtZW50c19fYnV0dG9uX2RlbGV0ZVwiKVxuIiwiY2xhc3MgRm9ybVZhbGlkYXRvciB7XG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBmb3JtRWxlbWVudCkge1xuICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgdGhpcy5fZm9ybUVsZW1lbnQgPSBmb3JtRWxlbWVudDtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgdGhpcy5fc2V0dGluZ3Muc3VibWl0QnV0dG9uU2VsZWN0b3JcbiAgICApO1xuICB9XG5cbiAgX3Nob3dJbnB1dEVycm9yID0gKGlucHV0LCBlcnJvck1lc3NhZ2UpID0+IHtcbiAgICBjb25zdCB7IGlucHV0RXJyb3JDbGFzcywgZXJyb3JDbGFzcyB9ID0gdGhpcy5fc2V0dGluZ3M7XG5cbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dC5pZH0tZXJyb3JgKTtcbiAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKGVycm9yQ2xhc3MpO1xuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGVycm9yTWVzc2FnZTtcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZChpbnB1dEVycm9yQ2xhc3MpO1xuICB9O1xuXG4gIF9oaWRlSW5wdXRFcnJvciA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHsgaW5wdXRFcnJvckNsYXNzLCBlcnJvckNsYXNzIH0gPSB0aGlzLl9zZXR0aW5ncztcblxuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0LmlkfS1lcnJvcmApO1xuICAgIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUoZXJyb3JDbGFzcyk7XG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoaW5wdXRFcnJvckNsYXNzKTtcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuICB9O1xuXG4gIF9jaGVja0lucHV0VmFsaWRpdHkgPSAoaW5wdXQpID0+IHtcbiAgICBpZiAoIWlucHV0LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dCwgaW5wdXQudmFsaWRhdGlvbk1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dCk7XG4gICAgfVxuICB9O1xuXG4gIF9zZXRFdmVudExpc3RlbmVycyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGlucHV0U2VsZWN0b3IgfSA9IHRoaXMuX3NldHRpbmdzO1xuXG4gICAgdGhpcy5pbnB1dExpc3QgPSBBcnJheS5mcm9tKFxuICAgICAgdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChpbnB1dFNlbGVjdG9yKVxuICAgICk7XG5cbiAgICB0aGlzLl90b2dnbGVCdXR0b24oKTsgLy9tZXRob2QgY2hlY2tcblxuICAgIHRoaXMuaW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXQpO1xuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b24oKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9oYXNWYWxpZElucHV0ID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLmlucHV0TGlzdC5ldmVyeSgoaW5wdXQpID0+IGlucHV0LnZhbGlkaXR5LnZhbGlkKTtcbiAgfTtcblxuICBfdG9nZ2xlQnV0dG9uID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgaW5hY3RpdmVCdXR0b25DbGFzcyB9ID0gdGhpcy5fc2V0dGluZ3M7XG4gICAgdGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyA9IGluYWN0aXZlQnV0dG9uQ2xhc3M7XG5cbiAgICBpZiAodGhpcy5faGFzVmFsaWRJbnB1dCgpKSB7XG4gICAgICB0aGlzLmVuYWJsZUJ1dHRvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc2FibGVCdXR0b24oKTtcbiAgICB9XG4gIH07XG5cbiAgZW5hYmxlQnV0dG9uID0gKCkgPT4ge1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICB9O1xuXG4gIGRpc2FibGVCdXR0b24gPSAoKSA9PiB7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgfTtcblxuICByZXNldFZhbGlkYXRpb24oKSB7XG4gICAgdGhpcy5pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XG4gICAgdGhpcy5fZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybVZhbGlkYXRvcjtcbiIsImV4cG9ydCBjbGFzcyBDYXJkIHtcbiAgY29uc3RydWN0b3IoZGF0YSwgdXNlcklkLCB0ZW1wbGF0ZUNhcmRTZWxlY3RvciwgaGFuZGxlQ2FyZENsaWNrLCBoYW5kbGVMaWtlSWNvbiwgaGFuZGxlRGVsZXRlQ2xpY2spIHtcbiAgICAvL2NvbnNvbGUubG9nKFwiZGF0YVwiLCBkYXRhKTtcbiAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICB0aGlzLl9uYW1lID0gZGF0YS5uYW1lO1xuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XG4gICAgdGhpcy5fbGlrZXMgPSBkYXRhLmxpa2VzO1xuICAgIHRoaXMuX2lkID0gZGF0YS5faWQ7XG4gICAgdGhpcy5fdXNlcklkID0gdXNlcklkO1xuICAgIHRoaXMuX293bmVySWQgPSBkYXRhLm93bmVyLl9pZDtcbiAgICAvL2NvbnNvbGUubG9nKFwib3duZXJJZFwiLCBkYXRhLm93bmVyLl9pZClcblxuICAgIHRoaXMuX3RlbXBsYXRlQ2FyZFNlbGVjdG9yID0gdGVtcGxhdGVDYXJkU2VsZWN0b3I7XG4gICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrID0gaGFuZGxlQ2FyZENsaWNrO1xuICAgIHRoaXMuX2hhbmRsZUxpa2VJY29uID0gaGFuZGxlTGlrZUljb247XG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2sgPSBoYW5kbGVEZWxldGVDbGljaztcbiAgfVxuXG4gIGdldElkKCkge1xuICAgIHJldHVybiB0aGlzLl9pZFxuICB9XG5cbiAgX2dldFRlbXBsYXRlKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX3RlbXBsYXRlQ2FyZFNlbGVjdG9yKVxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRzX19jYXJkJyk7XG4gIH1cblxuICBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuX2hhbmRsZUxpa2VJY29uKCkpO1xuICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrKHRoaXMpKTtcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sodGhpcy5fbmFtZSwgdGhpcy5fbGluaykpO1xuICB9XG5cbiAgcmVtb3ZlQ2FyZCgpe1xuICAgIHRoaXMuX2NhcmRFbGVtZW50LnJlbW92ZSgpO1xuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gbnVsbDtcbiAgfVxuXG4gIHNldExpa2VDb3VudGVyKG5ld0xpa2VzKSB7ICAgLy9sZW5ndGgga8Sxc23EsW7EsSBva3V5YW3EsXlvciBrYXJ0IGVrbGVuZW1peW9yIC0gaGFuZGxlY2FyZHN1Ym1pdCBmb25rc2l5b251bmEgbGlrZXMgdmUgX2lkIGVrbGV5ZXJlayDDp8O2emTDvCBeXisrXG4gICAgdGhpcy5fbGlrZXMgPSBuZXdMaWtlcztcblxuICAgIGNvbnN0IGxpa2VDb3VudGVyID0gdGhpcy5fbGlrZXMubGVuZ3RoO1xuICAgIHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50c19fY2FyZF9saWtlcycpLnRleHRDb250ZW50ID0gbGlrZUNvdW50ZXI7XG5cbiAgICBjb25zdCBsaWtlQ2xpY2tlZGJ5Q3VycmVudFVzZXIgPSB0aGlzLmlzTGlrZWQoKTtcbiAgICBpZihsaWtlQ2xpY2tlZGJ5Q3VycmVudFVzZXIpIHtcbiAgICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LmFkZCgnZWxlbWVudHNfX2J1dHRvbi1saWtlX2FjdGl2ZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2VsZW1lbnRzX19idXR0b24tbGlrZV9hY3RpdmUnKTtcbiAgICB9XG4gIH1cblxuICBpc0xpa2VkKCl7XG4gICAgcmV0dXJuIHRoaXMuX2xpa2VzLmZpbmQodXNlciA9PiB1c2VyLl9pZCA9PT0gdGhpcy5fdXNlcklkKTtcbiAgfVxuXG5cbiAgZ2VuZXJhdGVDYXJkKCkge1xuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKS5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICB0aGlzLl9jYXJkSW1hZ2UgPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudHNfX2ltYWdlJyk7XG4gICAgdGhpcy5fY2FyZE5hbWUgPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudHNfX2NhcmQtdGV4dCcpO1xuICAgIHRoaXMuX2xpa2VCdXR0b24gPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudHNfX2J1dHRvbi1saWtlJyk7XG4gICAgdGhpcy5fZGVsZXRlQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRzX19idXR0b24tZGVsZXRlJyk7XG5cbiAgICAvL2NhcmQgLy8gZGVzdHJ1Y3R1cmluZyBhc3NpZ25tZW50Ly9cbiAgICB0aGlzLl9jYXJkSW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWx0ID0gdGhpcy5fbmFtZTtcbiAgICB0aGlzLl9jYXJkTmFtZS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XG5cbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuc2V0TGlrZUNvdW50ZXIodGhpcy5fbGlrZXMpO1xuXG4gICAgaWYodGhpcy5fdXNlcklkICE9PSB0aGlzLl9vd25lcklkKSB7XG4gICAgICB0aGlzLl9kZWxldGVCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJyAvLyBlbGVtZW50c19fYnV0dG9uLWRlbGV0ZVxuICAgICAgfTtcblxuICAgIHJldHVybiB0aGlzLl9jYXJkRWxlbWVudDtcbiAgfVxufVxuXG4iLCJjb25zdCBQT1BVUF9DTEFTUyA9ICdwb3B1cCc7XG5jb25zdCBDTE9TRV9CVVRUT05fQ0xBU1MgPSAncG9wdXBfX2Nsb3NlJztcbmNvbnN0IFBPUFVQX1NFTEVDVE9SX0NMQVNTID0gJ3BvcHVwX29wZW4nO1xuXG5leHBvcnQgY2xhc3MgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgdGhpcy5fcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpXG4gICAgdGhpcy5faGFuZGxlRXNjQ2xvc2UgPSB0aGlzLl9oYW5kbGVFc2NDbG9zZS5iaW5kKHRoaXMpXG4gIH1cblxuICBfaGFuZGxlRXNjQ2xvc2UoZXZ0KSB7XG4gICAgaWYgKGV2dC5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9XG4gIH1cblxuICBvcGVuKCkge1xuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5hZGQoUE9QVVBfU0VMRUNUT1JfQ0xBU1MpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QucmVtb3ZlKFBPUFVQX1NFTEVDVE9SX0NMQVNTKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICB9XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCAoZXZ0KSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFBPUFVQX0NMQVNTKSB8fFxuICAgICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhDTE9TRV9CVVRUT05fQ0xBU1MpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cbi8vKioqIG1vdXNlZG93biByZXBsYWNlZCBjbGljayB0byBwcmV2ZW50IHRoZSBidWcgaWYgeW91IGNsaWNrIGluc2lkZSBhIHBvcHVwIGFuZCB0aGVuIG1vdmUgeW91ciBtb3VzZSBvdXRzaWRlIGl0XG4vLyBhbmQgcmVsZWFzZSB0aGUgYnV0dG9uIGFib3ZlIHRoZSBvdmVybGF5IHRoZW4gdGhlIHBvcHVwIGNsb3NlcyBidXQgaXTigJlzIG5vdFxuIiwiaW1wb3J0IHsgUG9wdXAgfSBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlU3VibWl0Rm9ybSApIHtcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKVxuXG4gICAgdGhpcy5faGFuZGxlU3VibWl0Rm9ybSA9IGhhbmRsZVN1Ym1pdEZvcm1cbiAgICB0aGlzLl9mb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtJylcbiAgICB0aGlzLl9pbnB1dHMgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B1cF9faW5wdXQnKSAgICAgICAvL1suLi50aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B1cF9faW5wdXQnKV1cbiAgfVxuXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB7fVxuXG5cbiAgICB0aGlzLl9pbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IGlucHV0LmlkXG4gICAgICBjb25zdCB2YWx1ZSA9IGlucHV0LnZhbHVlXG4gICAgICB2YWx1ZXNba2V5XSA9IHZhbHVlXG4gICAgfSlcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpXG5cbiAgICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lciggJ3N1Ym1pdCcsIChlKSA9PiB7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnaW5wdXQgdGFrZW4nKVxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgICAgICAgdGhpcy5faGFuZGxlU3VibWl0Rm9ybSh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gIHNldElucHV0VmFsdWVzKGRhdGEpe1xuICAgIHRoaXMuX2lucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgaW5wdXQudmFsdWUgPSBkYXRhW2lucHV0Lm5hbWVdO1xuICAgIH0pXG4gIH1cblxuICBjaGFuZ2VTdWJtaXRIYW5kbGVyKG5ld1N1Ym1pdEhhbmRsZXIpIHtcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXRGb3JtID0gbmV3U3VibWl0SGFuZGxlclxuICB9XG5cbiAgY2hhbmdlVGV4dCh0ZXh0KSB7XG4gICAgY29uc3QgYnV0dG9uID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19zYXZlJylcblxuICAgIGlmKHRleHQgPT09ICdTYXZpbmcnKSB7XG4gICAgICBidXR0b24udGV4dENvbnRlbnQgPSAnU2F2aW5nLi4uJ1xuICAgIH1cbiAgICBpZih0ZXh0ID09PSAnRGVmYXVsdCcpIHtcbiAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9ICdTYXZlJ1xuICAgIH1cbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgICAgc3VwZXIuY2xvc2UoKVxuICAgICAgdGhpcy5fZm9ybS5yZXNldCgpXG4gIH1cblxufVxuXG4iLCJjbGFzcyBBcGkge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5fYmFzZVVybCA9IG9wdGlvbnMuYmFzZVVybFxuICAgIHRoaXMuX2hlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnNcbiAgICB0aGlzLl9jaGVja1Jlc3BvbnNlID0gb3B0aW9ucy5jaGVja1Jlc3BvbnNlXG4gIH1cblxuXG5cbiAgZ2V0VXNlckluZm8oKSB7XG4gICAgcmV0dXJuIGZldGNoKHRoaXMuX2Jhc2VVcmwgKyAnL3VzZXJzL21lJywge1xuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSlcbiAgICAudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAvLyAuY2F0Y2goZXJyID0+IHtcbiAgICAvLyAgIGNvbnNvbGUubG9nKCdBcGkgaGFzIGFuIGVycm9yISEhJylcbiAgICAvLyB9KVxuICB9XG5cbiAgZWRpdFByb2ZpbGUgPSAobmFtZSwgYWJvdXQpID0+IHtcbiAgICByZXR1cm4gZmV0Y2godGhpcy5fYmFzZVVybCArICcvdXNlcnMvbWUnLCB7XG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGFib3V0LFxuICAgICAgfSlcbiAgICB9KVxuICAgIC50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpXG4gICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gIH1cblxuICBlZGl0QXZhdGFyKGF2YXRhcikge1xuICAgIHJldHVybiBmZXRjaCh0aGlzLl9iYXNlVXJsICsgJy91c2Vycy9tZS9hdmF0YXInLCB7XG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGF2YXRhclxuICAgICAgfSlcbiAgICB9KVxuICAgIC50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpXG4gICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gIH1cblxuICBnZXRJbml0aWFsQ2FyZHMoKSB7XG4gICAgcmV0dXJuIGZldGNoKHRoaXMuX2Jhc2VVcmwgKyAnL2NhcmRzJywge1xuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xuICAgIH0pXG4gICAgLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSlcbiAgICAudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgfSAvL25hbWUgICYgbGluayBpbiB0aGUgYm9keSBjaGVjayBtLlxuXG4gIGFkZENhcmQobmFtZSwgbGluaykge1xuICAgIHJldHVybiBmZXRjaCh0aGlzLl9iYXNlVXJsICsgJy9jYXJkcycsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBuYW1lLFxuICAgICAgICBsaW5rLFxuICAgICAgfSlcbiAgICB9KVxuICAgIC50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpXG4gICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gIH1cblxuICBhZGRMaWtlKGlkKSB7XG4gICAgcmV0dXJuIGZldGNoKHRoaXMuX2Jhc2VVcmwgKyAnL2NhcmRzL2xpa2VzLycgKyBpZCwge1xuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xuICAgIH0pXG4gICAgLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSlcbiAgICAudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgfVxuXG4gIHJlbW92ZUxpa2UoaWQpIHtcbiAgICByZXR1cm4gZmV0Y2godGhpcy5fYmFzZVVybCArICcvY2FyZHMvbGlrZXMvJyArIGlkLCB7XG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzXG4gICAgfSlcbiAgICAudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKVxuICAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuICB9XG5cbiAgZGVsZXRlQ2FyZChpZCkge1xuICAgIHJldHVybiBmZXRjaCh0aGlzLl9iYXNlVXJsICsgJy9jYXJkcy8nICsgaWQsIHtcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnNcbiAgICB9KVxuICAgIC50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpXG4gICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gIH1cblxuICBfY2hlY2tSZXNwb25zZShyZXMpe1xuICAgIGlmIChyZXMub2spIHtcbiAgICAgIHJldHVybiByZXMuanNvbigpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXMuc3RhdHVzVGV4dCk7XG4gICAgfVxuICB9XG59XG5cblxuZXhwb3J0IGNvbnN0IGFwaSA9IG5ldyBBcGkoe1xuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLm5vbW9yZXBhcnRpZXMuY28vdjEvY29ob3J0LTMtZW5cIixcbiAgaGVhZGVyczoge1xuICAgIGF1dGhvcml6YXRpb246IFwiOTM5OGE0ODMtNDg0ZS00ZWJkLWEzNzQtYjZiM2I5ODVlOWM0XCIsXG4gICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgfVxufSk7IC8vIHRoaXMuX2Jhc2VVcmwgLy8gdGhpcy5faGVhZGVyc1xuIiwiXG5pbXBvcnQgXCIuLi9wYWdlL2luZGV4LmNzc1wiOyAvLyBtYWluIGJyaWRnZSB0byBjc3MgZmlsZXMgYWZ0ZXIgd2VicGFjayBidWlsZCBhbHdheXMgaW5zdGFsbCAxc3RcblxuaW1wb3J0IHsgc2V0dGluZ3MsIGVkaXRGb3JtLCBhZGRDYXJkRm9ybSwgZWRpdEJ1dHRvbiwgaW5wdXROYW1lLCBpbnB1dFByb2Zlc3Npb24sXG4gICAgICAgICBhZGRCdXR0b24sIHByb2ZpbGVBdmF0YXIsIGF2YXRhckNoYW5nZSB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tICcuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMnO1xuaW1wb3J0IHsgQ2FyZCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ2FyZC5qcyc7XG5pbXBvcnQgeyBTZWN0aW9uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzJztcbmltcG9ydCB7IFBvcHVwV2l0aEZvcm0gfSBmcm9tICcuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMnO1xuaW1wb3J0IHsgUG9wdXBXaXRoSW1hZ2UgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xuaW1wb3J0IHsgVXNlckluZm8gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xuXG5pbXBvcnQgeyBhcGksIEFwaSB9IGZyb20gXCIuLi91dGlscy9BcGkuanNcIjtcbi8vaW1wb3J0IHsgUG9wdXAgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFwiO1xuXG5sZXQgdXNlcklkXG5cbi8vYXBpLmdldFVzZXJJbmZvICYgYXBpLmdldEluaXRpYWxDYXJkcyBjb21iaW5lZCB3aXRoIFByb21pc2UuXG5Qcm9taXNlLmFsbChbYXBpLmdldFVzZXJJbmZvKCksIGFwaS5nZXRJbml0aWFsQ2FyZHMoKV0pXG4gIC50aGVuKChbdXNlckRhdGEsIGNhcmRzXSkgPT4ge1xuICAgIHVzZXJJZCA9IHVzZXJEYXRhLl9pZCAvL2NvbnNvbGUubG9nKCd1c2VyID0+JywgdXNlckRhdGEpXG5cbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyh1c2VyRGF0YS5uYW1lLCAgdXNlckRhdGEuYWJvdXQsIHVzZXJEYXRhLmF2YXRhcilcbiAgICBzZWN0aW9uLnJlbmRlcmVySXRlbXMoY2FyZHMpXG4gIH0pXG4gIC5jYXRjaChjb25zb2xlLmxvZylcblxuLy9mb3JtIHZhbGlkYXRvciBzZXR0aW5ncyBkb20gcmVmZXJlbmNlcy8vXG5jb25zdCBlZGl0Rm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKCBzZXR0aW5ncywgZWRpdEZvcm0gKTtcbmNvbnN0IGFkZENhcmRGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoIHNldHRpbmdzLCBhZGRDYXJkRm9ybSApO1xuY29uc3QgYXZhdGFyRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKCBzZXR0aW5ncywgIGF2YXRhckNoYW5nZSApO1xuXG5lZGl0Rm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG5hZGRDYXJkRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG5hdmF0YXJGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcbmVkaXRGb3JtVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpO1xuXG4vLyBoYW5kbGUgYWRkY2FyZHN1Ym1pdFxuY29uc3QgaGFuZGxlQ2FyZFN1Ym1pdCA9IChkYXRhKSA9PiB7XG4gIGFkZENhcmRQb3B1cC5jaGFuZ2VUZXh0KCdTYXZpbmcnKVxuICBhcGkuYWRkQ2FyZChkYXRhLmNhcmRUaXRsZSwgZGF0YS5jYXJkSW1hZ2VMaW5rKVxuICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICBzZWN0aW9uLmFkZEl0ZW0ocmVzKVxuICAgICAgYWRkQ2FyZFBvcHVwLmNoYW5nZVRleHQoJ0RlZmF1bHQnKVxuICAgIH0pXG4gICAgLmNhdGNoKGNvbnNvbGUubG9nKVxuXG4gICAgYWRkQ2FyZFBvcHVwLmNsb3NlKCk7XG59XG4vL2hhbmRsZSBlZGl0cHJvZmlsZSBzdWJtaXRcbmNvbnN0IGhhbmRsZVByb2ZpbGVGb3JtU3VibWl0ID0gKGRhdGEpID0+IHtcbiAgZWRpdFByb2ZpbGVQb3B1cC5jaGFuZ2VUZXh0KCdTYXZpbmcnKVxuICBhcGkuZWRpdFByb2ZpbGUoZGF0YS5uYW1lLCBkYXRhLnByb2Zlc3Npb24pXG4gICAgLnRoZW4oIHJlcyA9PiB7XG4gICAgICB1c2VySW5mby5zZXRVc2VySW5mbyhyZXMubmFtZSwgZGF0YS5wcm9mZXNzaW9uLCByZXMuYXZhdGFyKVxuICAgICAgZWRpdFByb2ZpbGVQb3B1cC5jaGFuZ2VUZXh0KCdEZWZhdWx0JylcbiAgICB9KVxuICAgIC5jYXRjaChjb25zb2xlLmxvZylcbiAgICAuZmluYWxseSggKCkgPT4ge1xuICAgICAgZWRpdFByb2ZpbGVQb3B1cC5jbG9zZSgpXG4gICAgfSlcbn07XG5cbi8vIGhhbmRsZSBhdmF0YXIgUGljdHVyZSBTdWJtaXRcbmNvbnN0IGhhbmRsZUF2YXRhclN1Ym1pdCA9IChkYXRhKSA9PiB7XG4gIGF2YXRhckNoYW5nZVBvcHVwLmNoYW5nZVRleHQoJ1NhdmluZycpXG4gIGFwaS5lZGl0QXZhdGFyKCBkYXRhLmxpbmspXG4gICAgLnRoZW4oIHJlcyA9PiB7XG4gICAgICB1c2VySW5mby5zZXRVc2VySW5mbyhyZXMubmFtZSwgcmVzLmFib3V0LCByZXMuYXZhdGFyKVxuICAgICAgYXZhdGFyQ2hhbmdlUG9wdXAuY2hhbmdlVGV4dCgnRGVmYXVsdCcpXG4gICAgfSlcbiAgICAuY2F0Y2goY29uc29sZS5sb2cpXG4gICAgLmZpbmFsbHkoICgpID0+IHtcbiAgICAgIGF2YXRhckNoYW5nZVBvcHVwLmNsb3NlKCk7XG4gICAgfSlcbn07XG5cbi8vaGFuZGxlIENhcmQgQ2xpY2tcbmNvbnN0IGhhbmRsZUNhcmRDbGljayA9IChkYXRhKSA9PiB7XG4gIGltYWdlUG9wdXAub3BlbihkYXRhLm5hbWUsIGRhdGEubGluayk7XG59XG5cbi8vaGFuZGxlIENhcmQgTGlrZSBGdW5jdGlvblxuY29uc3QgaGFuZGxlTGlrZUljb24gPSAoY2FyZCkgPT4ge1xuICBpZihjYXJkLmlzTGlrZWQoKSkge1xuICAgIGFwaS5yZW1vdmVMaWtlKGNhcmQuZ2V0SWQoKSlcbiAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIGNhcmQuc2V0TGlrZUNvdW50ZXIocmVzLmxpa2VzKVxuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgYXBpLmFkZExpa2UoY2FyZC5nZXRJZCgpKVxuICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgY2FyZC5zZXRMaWtlQ291bnRlcihyZXMubGlrZXMpXG4gICAgfSlcbiAgfVxufVxuXG4vLyBoYW5kbGUgY29uZmlybSBDYXJkIERlbGV0ZSBGdW5jdGlvblxuY29uc3QgaGFuZGxlRGVsZXRlQ2xpY2sgPSAoY2FyZCkgPT4ge1xuICBjb25maXJtQ2FyZERlbGV0ZS5vcGVuKClcblxuICBjb25maXJtQ2FyZERlbGV0ZS5jaGFuZ2VTdWJtaXRIYW5kbGVyKCgpID0+IHtcbiAgICBhcGkuZGVsZXRlQ2FyZChjYXJkLmdldElkKCkpXG4gICAgLnRoZW4oICgpID0+IHtcbiAgICAgIGNhcmQucmVtb3ZlQ2FyZCgpXG4gICAgfSlcbiAgICBjb25maXJtQ2FyZERlbGV0ZS5jbG9zZSgpXG4gIH0pXG59XG5cbi8vY2xhc3MgaW5zdGFuY2VzIG9mIFBvcHVwXG5jb25zdCBlZGl0UHJvZmlsZVBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oJyNwb3B1cC10ZW1wbGF0ZScsIGhhbmRsZVByb2ZpbGVGb3JtU3VibWl0KVxuZWRpdFByb2ZpbGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpXG5cbmNvbnN0IGF2YXRhckNoYW5nZVBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oJyNwb3B1cC10ZW1wbGF0ZS1hdmF0YXInLCBoYW5kbGVBdmF0YXJTdWJtaXQpXG5hdmF0YXJDaGFuZ2VQb3B1cC5zZXRFdmVudExpc3RlbmVycygpXG5cbmNvbnN0IGFkZENhcmRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKCcjcG9wdXAtdGVtcGxhdGUtZm9ybScsIGhhbmRsZUNhcmRTdWJtaXQpXG5hZGRDYXJkUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKSAvL29ubHkgY2FsbCBvbmNlXG5cbmNvbnN0IGNvbmZpcm1DYXJkRGVsZXRlID0gbmV3IFBvcHVwV2l0aEZvcm0oJyNwb3B1cC10ZW1wbGF0ZS1jb25maXJtJywgaGFuZGxlRGVsZXRlQ2xpY2spXG5jb25maXJtQ2FyZERlbGV0ZS5zZXRFdmVudExpc3RlbmVycygpXG5cbmNvbnN0IGltYWdlUG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoJyNwb3B1cC1pbWFnZScpXG5pbWFnZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cblxuY29uc3QgY3JlYXRlQ2FyZCA9IChkYXRhKSA9PiB7XG4gIGNvbnN0IGl0ZW0gPSBuZXcgQ2FyZCAoXG4gICAgZGF0YSxcbiAgICB1c2VySWQsXG4gICAgJyNjYXJkLXRlbXBsYXRlJyxcbiAgICAoKSA9PiBoYW5kbGVDYXJkQ2xpY2soZGF0YSksICAgICAgLy80dGggY29uc3RydWN0b3IgaXRlbSBoYW5kbGVDYXJkQ2xpY2tcbiAgICAoKSA9PiBoYW5kbGVMaWtlSWNvbihpdGVtKSwgICAgICAgLy81dGggIGNvbnN0cnVjdG9yIGl0ZW0gaGFuZGxlTGlrZUljb25cbiAgICAoaWQpID0+IGhhbmRsZURlbGV0ZUNsaWNrKGlkKSAgICAgLy82dGggY29uc3RyY3V0b3IgaXRlbSBoYW5kbGVEZWxldGVDbGlja1xuICApXG4gcmV0dXJuIGl0ZW0uZ2VuZXJhdGVDYXJkKCk7XG59XG5cblxuXG5jb25zdCBzZWN0aW9uID0gbmV3IFNlY3Rpb24oIHsgcmVuZGVyZXI6IGNyZWF0ZUNhcmQgfSwgJy5lbGVtZW50c19fY2FyZHMnIClcblxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oe1xuICBwcm9maWxlTmFtZVNlbGVjdG9yOiAnLnByb2ZpbGVfX2hlYWRlcicsXG4gIHByb2ZpbGVQcm9mZXNzaW9uU2VsZWN0b3I6ICcucHJvZmlsZV9fcHJvZmVzc2lvbicsXG4gIHByb2ZpbGVBdmF0YXI6ICcucHJvZmlsZV9faW1hZ2UnLFxufSlcblxuZnVuY3Rpb24gb3BlblByb2ZpbGVQb3B1cCgpIHtcbiAgY29uc3QgcHJvZmlsZUluZm8gPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xuXG4gIGlucHV0TmFtZS52YWx1ZSA9IHByb2ZpbGVJbmZvLm5hbWU7XG4gIGlucHV0UHJvZmVzc2lvbi52YWx1ZSA9IHByb2ZpbGVJbmZvLnByb2Zlc3Npb247XG5cbiAgZWRpdEZvcm1WYWxpZGF0b3IucmVzZXRWYWxpZGF0aW9uKCk7XG4gIGVkaXRGb3JtVmFsaWRhdG9yLmVuYWJsZUJ1dHRvbigpO1xuICBlZGl0UHJvZmlsZVBvcHVwLm9wZW4oKTtcbn1cblxuLy9FdmVudCBoYW5kbGVycyBzdWJzY3JpcHRpb25zIHRvIHBvcHVwL21vZGFsIGNvbnRyb2xzXG5lZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb3BlblByb2ZpbGVQb3B1cClcblxuYWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICBhZGRDYXJkRm9ybVZhbGlkYXRvci5yZXNldFZhbGlkYXRpb24oKTtcbiAgYWRkQ2FyZEZvcm1WYWxpZGF0b3IuZGlzYWJsZUJ1dHRvbigpO1xuICBhZGRDYXJkUG9wdXAub3BlbigpO1xufSlcblxucHJvZmlsZUF2YXRhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgYXZhdGFyRm9ybVZhbGlkYXRvci5yZXNldFZhbGlkYXRpb24oKTtcbiAgYXZhdGFyRm9ybVZhbGlkYXRvci5kaXNhYmxlQnV0dG9uKCk7XG4gIGF2YXRhckNoYW5nZVBvcHVwLm9wZW4oKTtcbn0pXG5cblxuIiwiXG5pbXBvcnQgeyBQb3B1cCB9IGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpXG4gICAgdGhpcy5fc3VidGl0bGUgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX3N1YnRpdGxlJyk7XG4gICAgdGhpcy5faW1hZ2UgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2ltYWdlJyk7XG4gIH1cblxuXG4gIG9wZW4obmFtZSwgbGluaykge1xuXG4gICAgc3VwZXIub3BlbigpXG4gICAgICB0aGlzLl9pbWFnZS5zcmMgPSBsaW5rO1xuICAgICAgdGhpcy5faW1hZ2UuYWx0ID0gbmFtZTtcbiAgICAgIHRoaXMuX3N1YnRpdGxlLnRleHRDb250ZW50ID0gbmFtZTtcblxuICB9XG5cbn1cbiIsIlxuZXhwb3J0IGNsYXNzIFNlY3Rpb24ge1xuICBjb25zdHJ1Y3Rvcih7IHJlbmRlcmVyIH0sIGNvbnRhaW5lciApIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyKTtcbiAgfVxuXG5cblxuICByZW5kZXJlckl0ZW1zKGl0ZW1zKSB7XG4gICAgaXRlbXMuZm9yRWFjaCgoZGF0YSkgPT4ge1xuICAgICAgICB0aGlzLmFkZEl0ZW0oZGF0YSlcbiAgICB9KVxuICB9O1xuXG4gIGFkZEl0ZW0oZGF0YSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9yZW5kZXJlcihkYXRhKVxuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpXG4gIH07XG5cblxufVxuIiwiZXhwb3J0IGNsYXNzIFVzZXJJbmZvIHtcbiAgY29uc3RydWN0b3Ioe3Byb2ZpbGVOYW1lU2VsZWN0b3IsIHByb2ZpbGVQcm9mZXNzaW9uU2VsZWN0b3IsIHByb2ZpbGVBdmF0YXJ9KVxuICB7XG4gICAgdGhpcy5fcHJvZmlsZU5hbWU9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJvZmlsZU5hbWVTZWxlY3Rvcik7XG4gICAgdGhpcy5fcHJvZmlsZVByb2Zlc3Npb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByb2ZpbGVQcm9mZXNzaW9uU2VsZWN0b3IpO1xuICAgIHRoaXMuX3Byb2ZpbGVBdmF0YXI9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJvZmlsZUF2YXRhcik7XG4gIH1cblxuICBnZXRVc2VySW5mbygpe1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLl9wcm9maWxlTmFtZS50ZXh0Q29udGVudCxcbiAgICAgIHByb2Zlc3Npb246IHRoaXMuX3Byb2ZpbGVQcm9mZXNzaW9uLnRleHRDb250ZW50LFxuICAgICAgYXZhdGFyOiB0aGlzLl9wcm9maWxlQXZhdGFyLnN0eWxlLmJhY2tncm91bmRJbWFnZVxuICAgIH1cbiAgfVxuXG4gIHNldFVzZXJJbmZvKG5hbWUsIHByb2Zlc3Npb24sIGF2YXRhcikge1xuICAgIHRoaXMuX3Byb2ZpbGVOYW1lLnRleHRDb250ZW50ID0gbmFtZTtcbiAgICB0aGlzLl9wcm9maWxlUHJvZmVzc2lvbi50ZXh0Q29udGVudCA9IHByb2Zlc3Npb247XG4gICAgdGhpcy5fcHJvZmlsZUF2YXRhci5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCR7YXZhdGFyfSlgO1xuICB9XG5cblxufVxuIl0sIm5hbWVzIjpbInByb2ZpbGVBdmF0YXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJwcm9maWxlUG9wdXAiLCJlZGl0QnV0dG9uIiwiaW5wdXROYW1lIiwiaW5wdXRQcm9mZXNzaW9uIiwiYWRkQnV0dG9uIiwic2V0dGluZ3MiLCJpbnB1dFNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsImVkaXRGb3JtIiwiYWRkQ2FyZEZvcm0iLCJhdmF0YXJDaGFuZ2UiLCJjb25zdHJ1Y3RvciIsImZvcm1FbGVtZW50IiwiaW5wdXQiLCJlcnJvck1lc3NhZ2UiLCJ0aGlzIiwiX3NldHRpbmdzIiwiZXJyb3JFbGVtZW50IiwiX2Zvcm1FbGVtZW50IiwiaWQiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0ZXh0Q29udGVudCIsInJlbW92ZSIsInZhbGlkaXR5IiwidmFsaWQiLCJfaGlkZUlucHV0RXJyb3IiLCJfc2hvd0lucHV0RXJyb3IiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImlucHV0TGlzdCIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfdG9nZ2xlQnV0dG9uIiwiZm9yRWFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwiZXZlcnkiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9oYXNWYWxpZElucHV0IiwiZW5hYmxlQnV0dG9uIiwiZGlzYWJsZUJ1dHRvbiIsIl9zdWJtaXRCdXR0b24iLCJkaXNhYmxlZCIsInJlc2V0VmFsaWRhdGlvbiIsImVuYWJsZVZhbGlkYXRpb24iLCJldnQiLCJwcmV2ZW50RGVmYXVsdCIsIl9zZXRFdmVudExpc3RlbmVycyIsIkNhcmQiLCJkYXRhIiwidXNlcklkIiwidGVtcGxhdGVDYXJkU2VsZWN0b3IiLCJoYW5kbGVDYXJkQ2xpY2siLCJoYW5kbGVMaWtlSWNvbiIsImhhbmRsZURlbGV0ZUNsaWNrIiwiX2RhdGEiLCJfbmFtZSIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfbGlrZXMiLCJsaWtlcyIsIl9pZCIsIl91c2VySWQiLCJfb3duZXJJZCIsIm93bmVyIiwiX3RlbXBsYXRlQ2FyZFNlbGVjdG9yIiwiX2hhbmRsZUNhcmRDbGljayIsIl9oYW5kbGVMaWtlSWNvbiIsIl9oYW5kbGVEZWxldGVDbGljayIsImdldElkIiwiX2dldFRlbXBsYXRlIiwiY29udGVudCIsIl9hZGRFdmVudExpc3RlbmVycyIsIl9saWtlQnV0dG9uIiwiX2RlbGV0ZUJ1dHRvbiIsIl9jYXJkSW1hZ2UiLCJyZW1vdmVDYXJkIiwiX2NhcmRFbGVtZW50Iiwic2V0TGlrZUNvdW50ZXIiLCJuZXdMaWtlcyIsImxpa2VDb3VudGVyIiwibGVuZ3RoIiwiaXNMaWtlZCIsImZpbmQiLCJ1c2VyIiwiZ2VuZXJhdGVDYXJkIiwiY2xvbmVOb2RlIiwiX2NhcmROYW1lIiwic3JjIiwiYWx0Iiwic3R5bGUiLCJkaXNwbGF5IiwiUE9QVVBfU0VMRUNUT1JfQ0xBU1MiLCJQb3B1cCIsInBvcHVwU2VsZWN0b3IiLCJfcG9wdXAiLCJfaGFuZGxlRXNjQ2xvc2UiLCJiaW5kIiwia2V5IiwiY2xvc2UiLCJvcGVuIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldEV2ZW50TGlzdGVuZXJzIiwidGFyZ2V0IiwiY29udGFpbnMiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlU3VibWl0Rm9ybSIsInN1cGVyIiwiX2hhbmRsZVN1Ym1pdEZvcm0iLCJfZm9ybSIsIl9pbnB1dHMiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJ2YWx1ZXMiLCJ2YWx1ZSIsImUiLCJzZXRJbnB1dFZhbHVlcyIsImNoYW5nZVN1Ym1pdEhhbmRsZXIiLCJuZXdTdWJtaXRIYW5kbGVyIiwiY2hhbmdlVGV4dCIsInRleHQiLCJidXR0b24iLCJyZXNldCIsImFwaSIsIm9wdGlvbnMiLCJhYm91dCIsImZldGNoIiwiX2Jhc2VVcmwiLCJtZXRob2QiLCJoZWFkZXJzIiwiX2hlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInRoZW4iLCJfY2hlY2tSZXNwb25zZSIsInJlcyIsImpzb24iLCJiYXNlVXJsIiwiY2hlY2tSZXNwb25zZSIsImdldFVzZXJJbmZvIiwiZWRpdEF2YXRhciIsImF2YXRhciIsImdldEluaXRpYWxDYXJkcyIsImFkZENhcmQiLCJhZGRMaWtlIiwicmVtb3ZlTGlrZSIsImRlbGV0ZUNhcmQiLCJvayIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXNUZXh0IiwiYXV0aG9yaXphdGlvbiIsImFsbCIsInVzZXJEYXRhIiwiY2FyZHMiLCJ1c2VySW5mbyIsInNldFVzZXJJbmZvIiwic2VjdGlvbiIsInJlbmRlcmVySXRlbXMiLCJjYXRjaCIsImNvbnNvbGUiLCJsb2ciLCJlZGl0Rm9ybVZhbGlkYXRvciIsIkZvcm1WYWxpZGF0b3IiLCJhZGRDYXJkRm9ybVZhbGlkYXRvciIsImF2YXRhckZvcm1WYWxpZGF0b3IiLCJjYXJkIiwiY29uZmlybUNhcmREZWxldGUiLCJlZGl0UHJvZmlsZVBvcHVwIiwiZWRpdFByb2ZpbGUiLCJwcm9mZXNzaW9uIiwiZmluYWxseSIsImF2YXRhckNoYW5nZVBvcHVwIiwiYWRkQ2FyZFBvcHVwIiwiY2FyZFRpdGxlIiwiY2FyZEltYWdlTGluayIsImFkZEl0ZW0iLCJpbWFnZVBvcHVwIiwiX3N1YnRpdGxlIiwiX2ltYWdlIiwiY29udGFpbmVyIiwicmVuZGVyZXIiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiaXRlbXMiLCJlbGVtZW50IiwicHJlcGVuZCIsIml0ZW0iLCJwcm9maWxlTmFtZVNlbGVjdG9yIiwicHJvZmlsZVByb2Zlc3Npb25TZWxlY3RvciIsIl9wcm9maWxlTmFtZSIsIl9wcm9maWxlUHJvZmVzc2lvbiIsIl9wcm9maWxlQXZhdGFyIiwiYmFja2dyb3VuZEltYWdlIiwicHJvZmlsZUluZm8iXSwic291cmNlUm9vdCI6IiJ9