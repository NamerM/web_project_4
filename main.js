!function(){"use strict";const e=document.querySelector(".profile__image"),t=document.querySelector(".popup_type_profile"),s=document.querySelector(".profile__button"),n=(t.querySelector(".popup__close"),t.querySelector(".popup__input_type_name")),i=t.querySelector(".popup__input_type_profession"),r=document.querySelector(".add-button");function o(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}document.querySelector(".elements__cards"),document.querySelector(".popup__form_edit"),document.querySelector(".popup__form_cards"),document.querySelector(".popup__form_avatar");class a{constructor(e,t){o(this,"_showInputError",((e,t)=>{const{inputErrorClass:s,errorClass:n}=this._settings,i=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(n),i.textContent=t,i.classList.add(s)})),o(this,"_hideInputError",(e=>{const{inputErrorClass:t,errorClass:s}=this._settings,n=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(s),n.classList.remove(t),n.textContent=""})),o(this,"_checkInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),o(this,"_setEventListeners",(()=>{const{inputSelector:e}=this._settings;this.inputList=Array.from(this._formElement.querySelectorAll(e)),this._toggleButton(),this.inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButton()}))}))})),o(this,"_hasValidInput",(()=>this.inputList.every((e=>e.validity.valid)))),o(this,"_toggleButton",(()=>{const{inactiveButtonClass:e}=this._settings;this._inactiveButtonClass=e,this._hasValidInput()?this.enableButton():this.disableButton()})),o(this,"enableButton",(()=>{this._submitButton.disabled=!1,this._submitButton.classList.remove(this._inactiveButtonClass)})),o(this,"disableButton",(()=>{this._submitButton.disabled=!0,this._submitButton.classList.add(this._inactiveButtonClass)})),this._settings=e,this._formElement=t,this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}resetValidation(){this.inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class l{constructor(e,t,s,n,i,r){this._data=e,this._name=e.name,this._link=e.link,this._likes=e.likes,this._id=e._id,this._userId=t,this._ownerId=e.owner._id,this._templateCardSelector=s,this._handleCardClick=n,this._handleLikeIcon=i,this._handleDeleteClick=r}getId(){return this._id}_getTemplate(){return document.querySelector(this._templateCardSelector).content.querySelector(".elements__card")}_addEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLikeIcon())),this._deleteButton.addEventListener("click",(()=>this._handleDeleteClick(this))),this._cardImage.addEventListener("click",(()=>this._handleCardClick(this._name,this._link)))}removeCard(){this._cardElement.remove(),this._cardElement=null}setLikeCounter(e){this._likes=e;const t=this._likes.length;this._cardLikeCounter.textContent=t,this.isLiked()?this._likeButton.classList.add("elements__button-like_active"):this._likeButton.classList.remove("elements__button-like_active")}isLiked(){return this._likes.find((e=>e._id===this._userId))}generateCard(){return this._cardElement=this._getTemplate().cloneNode(!0),this._cardImage=this._cardElement.querySelector(".elements__image"),this._cardName=this._cardElement.querySelector(".elements__card-text"),this._likeButton=this._cardElement.querySelector(".elements__button-like"),this._deleteButton=this._cardElement.querySelector(".elements__button-delete"),this._cardLikeCounter=this._cardElement.querySelector(".elements__card_likes"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardName.textContent=this._name,this._addEventListeners(),this.setLikeCounter(this._likes),this._userId!==this._ownerId&&(this._deleteButton.style.display="none"),this._cardElement}}const h="popup_open";class c{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popup.classList.add(h),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove(h),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close"))&&this.close()}))}}class d extends c{constructor(e,t){super(e),this._handleSubmitForm=t,this._form=this._popup.querySelector(".popup__form"),this._inputs=this._form.querySelectorAll(".popup__input"),this._submitButton=this._popup.querySelector(".popup__save")}_getInputValues(){const e={};return this._inputs.forEach((t=>{const s=t.id,n=t.value;e[s]=n})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmitForm(this._getInputValues())}))}setInputValues(e){this._inputs.forEach((t=>{t.value=e[t.name]}))}changeSubmitHandler(e){this._handleSubmitForm=e}changeText(e){const t=this._submitButton;"Saving"===e&&(t.textContent="Saving..."),"Default"===e&&(t.textContent="Save")}close(){super.close(),this._form.reset()}}function _(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}const u=new class{constructor(e){_(this,"editProfile",((e,t)=>fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse).then((e=>e.json())))),_(this,"addLike",(e=>fetch(this._baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._headers}).then(this._checkResponse).then((e=>e.json())))),_(this,"removeLike",(e=>fetch(this._baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._headers}).then(this._checkResponse).then((e=>e.json())))),this._baseUrl=e.baseUrl,this._headers=e.headers,this._checkResponse=e.checkResponse}getUserInfo(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then(this._checkResponse).then((e=>e.json()))}editAvatar(e){return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse).then((e=>e.json()))}getInitialCards(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then(this._checkResponse).then((e=>e.json()))}addCard(e,t){return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkResponse).then((e=>e.json()))}deleteCard(e){return fetch(this._baseUrl+"/cards/"+e,{method:"DELETE",headers:this._headers}).then(this._checkResponse).then((e=>e.json()))}_checkResponse(e){return e.ok?e.json():Promise.reject(e.statusText)}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"9398a483-484e-4ebd-a374-b6b3b985e9c4","Content-Type":"application/json"}});let p;Promise.all([u.getUserInfo(),u.getInitialCards()]).then((e=>{let[t,s]=e;p=t._id,L.setUserInfo(t.name,t.about,t.avatar),S.rendererItems(s)})).catch(console.log);const m={};var f;f={inputSelector:".popup__input",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_disabled",inputErrorClass:"popup__input-error_open",errorClass:"popup__error_visible",formSelector:".popup__form"},Array.from(document.querySelectorAll(f.formSelector)).forEach((e=>{const t=new a(f,e),s=e.getAttribute("name");m[s]=t,t.enableValidation(),t.resetValidation(),t.disableButton(),t.enableButton()}));const v=e=>{E.open(),E.changeSubmitHandler((()=>{u.deleteCard(e.getId()).then((()=>{e.removeCard()})),E.close()}))},g=new d("#popup-template",(e=>{g.changeText("Saving"),u.editProfile(e.name,e.profession).then((t=>{L.setUserInfo(t.name,e.profession,t.avatar)})).then((e=>{g.close(e)})).catch(console.log).finally((()=>{m.profileForm.resetValidation(),m.profileForm.enableButton(),g.changeText("Default")}))}));g.setEventListeners();const b=new d("#popup-template-avatar",(e=>{b.changeText("Saving"),u.editAvatar(e.link).then((e=>{L.setUserInfo(e.name,e.about,e.avatar),b.changeText("Default")})).then((e=>{b.close(e)})).catch(console.log).finally((()=>{m.avatarChange.resetValidation(),m.avatarChange.disableButton()}))}));b.setEventListeners();const k=new d("#popup-template-form",(e=>{k.changeText("Saving"),u.addCard(e.cardTitle,e.cardImageLink).then((e=>{S.addItem(e)})).then((e=>{k.close(e)})).catch(console.log).finally((()=>{m["add-cards"].resetValidation(),m["add-cards"].disableButton(),k.changeText("Default")}))}));k.setEventListeners();const E=new d("#popup-template-confirm",v);E.setEventListeners();const y=new class extends c{constructor(e){super(e),this._subtitle=this._popup.querySelector(".popup__subtitle"),this._image=this._popup.querySelector(".popup__image")}open(e,t){super.open(),this._image.src=t,this._image.alt=e,this._subtitle.textContent=e}}("#popup-image");y.setEventListeners();const S=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}rendererItems(e){e.forEach((e=>{this.addItem(e)}))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}}({renderer:e=>{const t=new l(e,p,"#card-template",(()=>(e=>{y.open(e.name,e.link)})(e)),(()=>{var e;((e=t).isLiked()?u.removeLike:u.addLike)(e.getId()).then((t=>{e.setLikeCounter(t.likes)}))}),(e=>v(e)));return t.generateCard()}},".elements__cards"),L=new class{constructor(e){let{profileNameSelector:t,profileProfessionSelector:s,profileAvatar:n}=e;this._profileName=document.querySelector(t),this._profileProfession=document.querySelector(s),this._profileAvatar=document.querySelector(n)}getUserInfo(){return{name:this._profileName.textContent,profession:this._profileProfession.textContent,avatar:this._profileAvatar.style.backgroundImage}}setUserInfo(e,t,s){this._profileName.textContent=e,this._profileProfession.textContent=t,this._profileAvatar.style.backgroundImage="url(".concat(s,")")}}({profileNameSelector:".profile__header",profileProfessionSelector:".profile__profession",profileAvatar:".profile__image"});s.addEventListener("click",(function(){const e=L.getUserInfo();n.value=e.name,i.value=e.profession,g.open()})),r.addEventListener("click",(()=>{k.open()})),e.addEventListener("click",(()=>{b.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,